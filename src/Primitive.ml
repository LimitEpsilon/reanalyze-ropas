let decode_prim = function
  | "%identity" | "%bytes_to_string" | "%bytes_of_string" | "%ignore"
  | "%revapply" | "%apply" | "%loc_LOC" | "%loc_FILE" | "%loc_LINE" | "%loc_"
  | "%loc_MODULE" | "%loc_FUNCTION" | "%field0" | "%field1" | "%setfield0"
  | "%makeblock" | "%makemutable" | "%raise" | "%reraise" | "%raise_notrace"
  | "%raise_with_backtrace" | "%sequand" | "%sequor" | "%boolnot"
  | "%big_endian" | "%backend_type" | "%word_size" | "%int_size" | "%max_wosize"
  | "%ostype_unix" | "%ostype_win32" | "%ostype_cygwin" | "%frame_pointers"
  | "%negint" | "%succint" | "%predint" | "%addint" | "%subint" | "%mulint"
  | "%divint" | "%modint" | "%andint" | "%orint" | "%xorint" | "%lslint"
  | "%lsrint" | "%asrint" | "%eq" | "%noteq" | "%ltint" | "%leint" | "%gtint"
  | "%geint" | "%incr" | "%decr" | "%intoffloat" | "%floatofint" | "%negfloat"
  | "%absfloat" | "%addfloat" | "%subfloat" | "%mulfloat" | "%divfloat"
  | "%eqfloat" | "%noteqfloat" | "%ltfloat" | "%lefloat" | "%gtfloat"
  | "%gefloat" | "%string_length" | "%string_safe_get" | "%string_safe_set"
  | "%string_unsafe_get" | "%string_unsafe_set" | "%bytes_length"
  | "%bytes_safe_get" | "%bytes_safe_set" | "%bytes_unsafe_get"
  | "%bytes_unsafe_set" | "%array_length" | "%array_safe_get"
  | "%array_safe_set" | "%array_unsafe_get" | "%array_unsafe_set" | "%obj_size"
  | "%obj_field" | "%obj_set_field" | "%floatarray_length"
  | "%floatarray_safe_get" | "%floatarray_safe_set" | "%floatarray_unsafe_get"
  | "%floatarray_unsafe_set" | "%obj_is_int" | "%lazy_force"
  | "%nativeint_of_int" | "%nativeint_to_int" | "%nativeint_neg"
  | "%nativeint_add" | "%nativeint_sub" | "%nativeint_mul" | "%nativeint_div"
  | "%nativeint_mod" | "%nativeint_and" | "%nativeint_or" | "%nativeint_xor"
  | "%nativeint_lsl" | "%nativeint_lsr" | "%nativeint_asr" | "%int32_of_int"
  | "%int32_to_int" | "%int32_neg" | "%int32_add" | "%int32_sub" | "%int32_mul"
  | "%int32_div" | "%int32_mod" | "%int32_and" | "%int32_or" | "%int32_xor"
  | "%int32_lsl" | "%int32_lsr" | "%int32_asr" | "%int64_of_int"
  | "%int64_to_int" | "%int64_neg" | "%int64_add" | "%int64_sub" | "%int64_mul"
  | "%int64_div" | "%int64_mod" | "%int64_and" | "%int64_or" | "%int64_xor"
  | "%int64_lsl" | "%int64_lsr" | "%int64_asr" | "%nativeint_of_int32"
  | "%nativeint_to_int32" | "%int64_of_int32" | "%int64_to_int32"
  | "%int64_of_nativeint" | "%int64_to_nativeint" | "%caml_ba_ref_1"
  | "%caml_ba_ref_2" | "%caml_ba_ref_3" | "%caml_ba_set_1" | "%caml_ba_set_2"
  | "%caml_ba_set_3" | "%caml_ba_unsafe_ref_1" | "%caml_ba_unsafe_ref_2"
  | "%caml_ba_unsafe_ref_3" | "%caml_ba_unsafe_set_1" | "%caml_ba_unsafe_set_2"
  | "%caml_ba_unsafe_set_3" | "%caml_ba_dim_1" | "%caml_ba_dim_2"
  | "%caml_ba_dim_3" | "%caml_string_get16" | "%caml_string_get16u"
  | "%caml_string_get32" | "%caml_string_get32u" | "%caml_string_get64"
  | "%caml_string_get64u" | "%caml_string_set16" | "%caml_string_set16u"
  | "%caml_string_set32" | "%caml_string_set32u" | "%caml_string_set64"
  | "%caml_string_set64u" | "%caml_bytes_get16" | "%caml_bytes_get16u"
  | "%caml_bytes_get32" | "%caml_bytes_get32u" | "%caml_bytes_get64"
  | "%caml_bytes_get64u" | "%caml_bytes_set16" | "%caml_bytes_set16u"
  | "%caml_bytes_set32" | "%caml_bytes_set32u" | "%caml_bytes_set64"
  | "%caml_bytes_set64u" | "%caml_bigstring_get16" | "%caml_bigstring_get16u"
  | "%caml_bigstring_get32" | "%caml_bigstring_get32u" | "%caml_bigstring_get64"
  | "%caml_bigstring_get64u" | "%caml_bigstring_set16"
  | "%caml_bigstring_set16u" | "%caml_bigstring_set32"
  | "%caml_bigstring_set32u" | "%caml_bigstring_set64"
  | "%caml_bigstring_set64u" | "%bswap16" | "%bswap_int32" | "%bswap_int64"
  | "%bswap_native" | "%int_as_pointer" | "%opaque" | "%sys_argv" | "%send"
  | "%sendself" | "%sendcache" | "%equal" | "%notequal" | "%lessequal"
  | "%lessthan" | "%greaterequal" | "%greaterthan" | "%compare" | "%atomic_load"
  | "%atomic_exchange" | "%atomic_cas" | "%atomic_fetch_add" | "%runstack"
  | "%reperform" | "%perform" | "%resume" | "%dls_get" | _ ->
    `APP
